<<<<<<< HEAD
=======
from __future__ import unicode_literals

>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
from django.contrib.auth import get_user_model
from django.contrib.auth.models import Permission

UserModel = get_user_model()


<<<<<<< HEAD
class ModelBackend:
=======
class ModelBackend(object):
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
    """
    Authenticates against settings.AUTH_USER_MODEL.
    """

    def authenticate(self, request, username=None, password=None, **kwargs):
        if username is None:
            username = kwargs.get(UserModel.USERNAME_FIELD)
        try:
            user = UserModel._default_manager.get_by_natural_key(username)
        except UserModel.DoesNotExist:
            # Run the default password hasher once to reduce the timing
<<<<<<< HEAD
            # difference between an existing and a nonexistent user (#20760).
=======
            # difference between an existing and a non-existing user (#20760).
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
            UserModel().set_password(password)
        else:
            if user.check_password(password) and self.user_can_authenticate(user):
                return user

    def user_can_authenticate(self, user):
        """
        Reject users with is_active=False. Custom user models that don't have
        that attribute are allowed.
        """
        is_active = getattr(user, 'is_active', None)
        return is_active or is_active is None

    def _get_user_permissions(self, user_obj):
        return user_obj.user_permissions.all()

    def _get_group_permissions(self, user_obj):
        user_groups_field = get_user_model()._meta.get_field('groups')
        user_groups_query = 'group__%s' % user_groups_field.related_query_name()
        return Permission.objects.filter(**{user_groups_query: user_obj})

    def _get_permissions(self, user_obj, obj, from_name):
        """
<<<<<<< HEAD
        Return the permissions of `user_obj` from `from_name`. `from_name` can
=======
        Returns the permissions of `user_obj` from `from_name`. `from_name` can
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        be either "group" or "user" to return permissions from
        `_get_group_permissions` or `_get_user_permissions` respectively.
        """
        if not user_obj.is_active or user_obj.is_anonymous or obj is not None:
            return set()

        perm_cache_name = '_%s_perm_cache' % from_name
        if not hasattr(user_obj, perm_cache_name):
            if user_obj.is_superuser:
                perms = Permission.objects.all()
            else:
                perms = getattr(self, '_get_%s_permissions' % from_name)(user_obj)
            perms = perms.values_list('content_type__app_label', 'codename').order_by()
<<<<<<< HEAD
            setattr(user_obj, perm_cache_name, {"%s.%s" % (ct, name) for ct, name in perms})
=======
            setattr(user_obj, perm_cache_name, set("%s.%s" % (ct, name) for ct, name in perms))
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return getattr(user_obj, perm_cache_name)

    def get_user_permissions(self, user_obj, obj=None):
        """
<<<<<<< HEAD
        Return a set of permission strings the user `user_obj` has from their
=======
        Returns a set of permission strings the user `user_obj` has from their
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        `user_permissions`.
        """
        return self._get_permissions(user_obj, obj, 'user')

    def get_group_permissions(self, user_obj, obj=None):
        """
<<<<<<< HEAD
        Return a set of permission strings the user `user_obj` has from the
=======
        Returns a set of permission strings the user `user_obj` has from the
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        groups they belong.
        """
        return self._get_permissions(user_obj, obj, 'group')

    def get_all_permissions(self, user_obj, obj=None):
        if not user_obj.is_active or user_obj.is_anonymous or obj is not None:
            return set()
        if not hasattr(user_obj, '_perm_cache'):
<<<<<<< HEAD
            user_obj._perm_cache = set()
            user_obj._perm_cache.update(self.get_user_permissions(user_obj))
=======
            user_obj._perm_cache = self.get_user_permissions(user_obj)
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
            user_obj._perm_cache.update(self.get_group_permissions(user_obj))
        return user_obj._perm_cache

    def has_perm(self, user_obj, perm, obj=None):
        if not user_obj.is_active:
            return False
        return perm in self.get_all_permissions(user_obj, obj)

    def has_module_perms(self, user_obj, app_label):
        """
<<<<<<< HEAD
        Return True if user_obj has any permissions in the given app_label.
=======
        Returns True if user_obj has any permissions in the given app_label.
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        """
        if not user_obj.is_active:
            return False
        for perm in self.get_all_permissions(user_obj):
            if perm[:perm.index('.')] == app_label:
                return True
        return False

    def get_user(self, user_id):
        try:
            user = UserModel._default_manager.get(pk=user_id)
        except UserModel.DoesNotExist:
            return None
        return user if self.user_can_authenticate(user) else None


class AllowAllUsersModelBackend(ModelBackend):
    def user_can_authenticate(self, user):
        return True


class RemoteUserBackend(ModelBackend):
    """
    This backend is to be used in conjunction with the ``RemoteUserMiddleware``
    found in the middleware module of this package, and is used when the server
    is handling authentication outside of Django.

    By default, the ``authenticate`` method creates ``User`` objects for
    usernames that don't already exist in the database.  Subclasses can disable
    this behavior by setting the ``create_unknown_user`` attribute to
    ``False``.
    """

    # Create a User object if not already in the database?
    create_unknown_user = True

    def authenticate(self, request, remote_user):
        """
<<<<<<< HEAD
        The username passed as ``remote_user`` is considered trusted. Return
        the ``User`` object with the given username. Create a new ``User``
        object if ``create_unknown_user`` is ``True``.

        Return None if ``create_unknown_user`` is ``False`` and a ``User``
=======
        The username passed as ``remote_user`` is considered trusted.  This
        method simply returns the ``User`` object with the given username,
        creating a new ``User`` object if ``create_unknown_user`` is ``True``.

        Returns None if ``create_unknown_user`` is ``False`` and a ``User``
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        object with the given username is not found in the database.
        """
        if not remote_user:
            return
        user = None
        username = self.clean_username(remote_user)

        # Note that this could be accomplished in one try-except clause, but
        # instead we use get_or_create when creating unknown users since it has
        # built-in safeguards for multiple threads.
        if self.create_unknown_user:
            user, created = UserModel._default_manager.get_or_create(**{
                UserModel.USERNAME_FIELD: username
            })
            if created:
                user = self.configure_user(user)
        else:
            try:
                user = UserModel._default_manager.get_by_natural_key(username)
            except UserModel.DoesNotExist:
                pass
        return user if self.user_can_authenticate(user) else None

    def clean_username(self, username):
        """
<<<<<<< HEAD
        Perform any cleaning on the "username" prior to using it to get or
        create the user object.  Return the cleaned username.

        By default, return the username unchanged.
=======
        Performs any cleaning on the "username" prior to using it to get or
        create the user object.  Returns the cleaned username.

        By default, returns the username unchanged.
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        """
        return username

    def configure_user(self, user):
        """
<<<<<<< HEAD
        Configure a user after creation and return the updated user.

        By default, return the user unmodified.
=======
        Configures a user after creation and returns the updated user.

        By default, returns the user unmodified.
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        """
        return user


class AllowAllUsersRemoteUserBackend(RemoteUserBackend):
    def user_can_authenticate(self, user):
        return True
