<<<<<<< HEAD
from itertools import chain

from django.apps import apps
from django.core.checks import Error
=======
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from itertools import chain

from django.apps import apps
from django.utils import six
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61


def check_generic_foreign_keys(app_configs=None, **kwargs):
    from .fields import GenericForeignKey

    if app_configs is None:
        models = apps.get_models()
    else:
        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)
    errors = []
    fields = (
<<<<<<< HEAD
        obj for model in models for obj in vars(model).values()
=======
        obj for model in models for obj in six.itervalues(vars(model))
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        if isinstance(obj, GenericForeignKey)
    )
    for field in fields:
        errors.extend(field.check())
    return errors
<<<<<<< HEAD


def check_model_name_lengths(app_configs=None, **kwargs):
    if app_configs is None:
        models = apps.get_models()
    else:
        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)
    errors = []
    for model in models:
        if len(model._meta.model_name) > 100:
            errors.append(
                Error(
                    'Model names must be at most 100 characters (got %d).' % (
                        len(model._meta.model_name),
                    ),
                    obj=model,
                    id='contenttypes.E005',
                )
            )
    return errors
=======
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
