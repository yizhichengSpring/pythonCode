from django.contrib.gis.gdal.base import GDALBase
<<<<<<< HEAD
from django.contrib.gis.gdal.error import GDALException
from django.contrib.gis.gdal.field import Field
from django.contrib.gis.gdal.geometries import OGRGeometry, OGRGeomType
from django.contrib.gis.gdal.prototypes import ds as capi, geom as geom_api
from django.utils.encoding import force_bytes, force_text
=======
from django.contrib.gis.gdal.error import GDALException, OGRIndexError
from django.contrib.gis.gdal.field import Field
from django.contrib.gis.gdal.geometries import OGRGeometry, OGRGeomType
from django.contrib.gis.gdal.prototypes import ds as capi, geom as geom_api
from django.utils import six
from django.utils.encoding import force_bytes, force_text
from django.utils.six.moves import range
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61


# For more information, see the OGR C API source code:
#  http://www.gdal.org/ogr__api_8h.html
#
# The OGR_F_* routines are relevant here.
class Feature(GDALBase):
    """
    This class that wraps an OGR Feature, needs to be instantiated
    from a Layer object.
    """
    destructor = capi.destroy_feature

    def __init__(self, feat, layer):
        """
<<<<<<< HEAD
        Initialize Feature from a pointer and its Layer object.
=======
        Initializes Feature from a pointer and its Layer object.
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        """
        if not feat:
            raise GDALException('Cannot create OGR Feature, invalid pointer given.')
        self.ptr = feat
        self._layer = layer

    def __getitem__(self, index):
        """
<<<<<<< HEAD
        Get the Field object at the specified index, which may be either
=======
        Gets the Field object at the specified index, which may be either
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        an integer or the Field's string label.  Note that the Field object
        is not the field's _value_ -- use the `get` method instead to
        retrieve the value (e.g. an integer) instead of a Field instance.
        """
<<<<<<< HEAD
        if isinstance(index, str):
            i = self.index(index)
        elif 0 <= index < self.num_fields:
            i = index
        else:
            raise IndexError('Index out of range when accessing field in a feature: %s.' % index)
        return Field(self, i)

    def __len__(self):
        "Return the count of fields in this feature."
=======
        if isinstance(index, six.string_types):
            i = self.index(index)
        else:
            if index < 0 or index > self.num_fields:
                raise OGRIndexError('index out of range')
            i = index
        return Field(self, i)

    def __iter__(self):
        "Iterates over each field in the Feature."
        for i in range(self.num_fields):
            yield self[i]

    def __len__(self):
        "Returns the count of fields in this feature."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return self.num_fields

    def __str__(self):
        "The string name of the feature."
        return 'Feature FID %d in Layer<%s>' % (self.fid, self.layer_name)

    def __eq__(self, other):
<<<<<<< HEAD
        "Do equivalence testing on the features."
=======
        "Does equivalence testing on the features."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return bool(capi.feature_equal(self.ptr, other._ptr))

    # #### Feature Properties ####
    @property
    def encoding(self):
        return self._layer._ds.encoding

    @property
    def fid(self):
<<<<<<< HEAD
        "Return the feature identifier."
=======
        "Returns the feature identifier."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return capi.get_fid(self.ptr)

    @property
    def layer_name(self):
<<<<<<< HEAD
        "Return the name of the layer for the feature."
=======
        "Returns the name of the layer for the feature."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        name = capi.get_feat_name(self._layer._ldefn)
        return force_text(name, self.encoding, strings_only=True)

    @property
    def num_fields(self):
<<<<<<< HEAD
        "Return the number of fields in the Feature."
=======
        "Returns the number of fields in the Feature."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return capi.get_feat_field_count(self.ptr)

    @property
    def fields(self):
<<<<<<< HEAD
        "Return a list of fields in the Feature."
        return [
            force_text(
                capi.get_field_name(capi.get_field_defn(self._layer._ldefn, i)),
                self.encoding,
                strings_only=True
            ) for i in range(self.num_fields)
        ]

    @property
    def geom(self):
        "Return the OGR Geometry for this Feature."
=======
        "Returns a list of fields in the Feature."
        return [capi.get_field_name(capi.get_field_defn(self._layer._ldefn, i))
                for i in range(self.num_fields)]

    @property
    def geom(self):
        "Returns the OGR Geometry for this Feature."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        # Retrieving the geometry pointer for the feature.
        geom_ptr = capi.get_feat_geom_ref(self.ptr)
        return OGRGeometry(geom_api.clone_geom(geom_ptr))

    @property
    def geom_type(self):
<<<<<<< HEAD
        "Return the OGR Geometry Type for this Feture."
=======
        "Returns the OGR Geometry Type for this Feture."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return OGRGeomType(capi.get_fd_geom_type(self._layer._ldefn))

    # #### Feature Methods ####
    def get(self, field):
        """
<<<<<<< HEAD
        Return the value of the field, instead of an instance of the Field
=======
        Returns the value of the field, instead of an instance of the Field
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        object.  May take a string of the field name or a Field object as
        parameters.
        """
        field_name = getattr(field, 'name', field)
        return self[field_name].value

    def index(self, field_name):
<<<<<<< HEAD
        "Return the index of the given field name."
        i = capi.get_field_index(self.ptr, force_bytes(field_name))
        if i < 0:
            raise IndexError('Invalid OFT field name given: %s.' % field_name)
=======
        "Returns the index of the given field name."
        i = capi.get_field_index(self.ptr, force_bytes(field_name))
        if i < 0:
            raise OGRIndexError('invalid OFT field name given: "%s"' % field_name)
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return i
