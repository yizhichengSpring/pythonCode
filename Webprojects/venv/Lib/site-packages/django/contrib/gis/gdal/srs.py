"""
  The Spatial Reference class, represents OGR Spatial Reference objects.

  Example:
  >>> from django.contrib.gis.gdal import SpatialReference
  >>> srs = SpatialReference('WGS84')
  >>> print(srs)
  GEOGCS["WGS 84",
      DATUM["WGS_1984",
          SPHEROID["WGS 84",6378137,298.257223563,
              AUTHORITY["EPSG","7030"]],
          TOWGS84[0,0,0,0,0,0,0],
          AUTHORITY["EPSG","6326"]],
      PRIMEM["Greenwich",0,
          AUTHORITY["EPSG","8901"]],
      UNIT["degree",0.01745329251994328,
          AUTHORITY["EPSG","9122"]],
      AUTHORITY["EPSG","4326"]]
  >>> print(srs.proj)
  +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs
  >>> print(srs.ellipsoid)
  (6378137.0, 6356752.3142451793, 298.25722356300003)
  >>> print(srs.projected, srs.geographic)
  False True
  >>> srs.import_epsg(32140)
  >>> print(srs.name)
  NAD83 / Texas South Central
"""
from ctypes import byref, c_char_p, c_int

from django.contrib.gis.gdal.base import GDALBase
from django.contrib.gis.gdal.error import SRSException
from django.contrib.gis.gdal.prototypes import srs as capi
<<<<<<< HEAD
=======
from django.utils import six
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
from django.utils.encoding import force_bytes, force_text


class SpatialReference(GDALBase):
    """
    A wrapper for the OGRSpatialReference object.  According to the GDAL Web site,
    the SpatialReference object "provide[s] services to represent coordinate
    systems (projections and datums) and to transform between them."
    """
    destructor = capi.release_srs

    def __init__(self, srs_input='', srs_type='user'):
        """
<<<<<<< HEAD
        Create a GDAL OSR Spatial Reference object from the given input.
=======
        Creates a GDAL OSR Spatial Reference object from the given input.
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        The input may be string of OGC Well Known Text (WKT), an integer
        EPSG code, a PROJ.4 string, and/or a projection "well known" shorthand
        string (one of 'WGS84', 'WGS72', 'NAD27', 'NAD83').
        """

        if srs_type == 'wkt':
            self.ptr = capi.new_srs(c_char_p(b''))
            self.import_wkt(srs_input)
            return
<<<<<<< HEAD
        elif isinstance(srs_input, str):
=======
        elif isinstance(srs_input, six.string_types):
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
            try:
                # If SRID is a string, e.g., '4326', then make acceptable
                # as user input.
                srid = int(srs_input)
                srs_input = 'EPSG:%d' % srid
            except ValueError:
                pass
<<<<<<< HEAD
        elif isinstance(srs_input, int):
=======
        elif isinstance(srs_input, six.integer_types):
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
            # EPSG integer code was input.
            srs_type = 'epsg'
        elif isinstance(srs_input, self.ptr_type):
            srs = srs_input
            srs_type = 'ogr'
        else:
            raise TypeError('Invalid SRS type "%s"' % srs_type)

        if srs_type == 'ogr':
            # Input is already an SRS pointer.
            srs = srs_input
        else:
            # Creating a new SRS pointer, using the string buffer.
            buf = c_char_p(b'')
            srs = capi.new_srs(buf)

        # If the pointer is NULL, throw an exception.
        if not srs:
            raise SRSException('Could not create spatial reference from: %s' % srs_input)
        else:
            self.ptr = srs

        # Importing from either the user input string or an integer SRID.
        if srs_type == 'user':
            self.import_user_input(srs_input)
        elif srs_type == 'epsg':
            self.import_epsg(srs_input)

    def __getitem__(self, target):
        """
<<<<<<< HEAD
        Return the value of the given string attribute node, None if the node
=======
        Returns the value of the given string attribute node, None if the node
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        doesn't exist.  Can also take a tuple as a parameter, (target, child),
        where child is the index of the attribute in the WKT.  For example:

        >>> wkt = 'GEOGCS["WGS 84", DATUM["WGS_1984, ... AUTHORITY["EPSG","4326"]]'
        >>> srs = SpatialReference(wkt) # could also use 'WGS84', or 4326
        >>> print(srs['GEOGCS'])
        WGS 84
        >>> print(srs['DATUM'])
        WGS_1984
        >>> print(srs['AUTHORITY'])
        EPSG
        >>> print(srs['AUTHORITY', 1]) # The authority value
        4326
        >>> print(srs['TOWGS84', 4]) # the fourth value in this wkt
        0
        >>> print(srs['UNIT|AUTHORITY']) # For the units authority, have to use the pipe symbole.
        EPSG
        >>> print(srs['UNIT|AUTHORITY', 1]) # The authority value for the units
        9122
        """
        if isinstance(target, tuple):
            return self.attr_value(*target)
        else:
            return self.attr_value(target)

    def __str__(self):
<<<<<<< HEAD
        "Use 'pretty' WKT."
=======
        "The string representation uses 'pretty' WKT."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return self.pretty_wkt

    # #### SpatialReference Methods ####
    def attr_value(self, target, index=0):
        """
        The attribute value for the given target node (e.g. 'PROJCS'). The index
        keyword specifies an index of the child node to return.
        """
<<<<<<< HEAD
        if not isinstance(target, str) or not isinstance(index, int):
=======
        if not isinstance(target, six.string_types) or not isinstance(index, int):
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
            raise TypeError
        return capi.get_attr_value(self.ptr, force_bytes(target), index)

    def auth_name(self, target):
<<<<<<< HEAD
        "Return the authority name for the given string target node."
        return capi.get_auth_name(self.ptr, force_bytes(target))

    def auth_code(self, target):
        "Return the authority code for the given string target node."
        return capi.get_auth_code(self.ptr, force_bytes(target))

    def clone(self):
        "Return a clone of this SpatialReference object."
        return SpatialReference(capi.clone_srs(self.ptr))

    def from_esri(self):
        "Morph this SpatialReference from ESRI's format to EPSG."
=======
        "Returns the authority name for the given string target node."
        return capi.get_auth_name(self.ptr, force_bytes(target))

    def auth_code(self, target):
        "Returns the authority code for the given string target node."
        return capi.get_auth_code(self.ptr, force_bytes(target))

    def clone(self):
        "Returns a clone of this SpatialReference object."
        return SpatialReference(capi.clone_srs(self.ptr))

    def from_esri(self):
        "Morphs this SpatialReference from ESRI's format to EPSG."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        capi.morph_from_esri(self.ptr)

    def identify_epsg(self):
        """
        This method inspects the WKT of this SpatialReference, and will
        add EPSG authority nodes where an EPSG identifier is applicable.
        """
        capi.identify_epsg(self.ptr)

    def to_esri(self):
<<<<<<< HEAD
        "Morph this SpatialReference to ESRI's format."
        capi.morph_to_esri(self.ptr)

    def validate(self):
        "Check to see if the given spatial reference is valid."
=======
        "Morphs this SpatialReference to ESRI's format."
        capi.morph_to_esri(self.ptr)

    def validate(self):
        "Checks to see if the given spatial reference is valid."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        capi.srs_validate(self.ptr)

    # #### Name & SRID properties ####
    @property
    def name(self):
<<<<<<< HEAD
        "Return the name of this Spatial Reference."
=======
        "Returns the name of this Spatial Reference."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        if self.projected:
            return self.attr_value('PROJCS')
        elif self.geographic:
            return self.attr_value('GEOGCS')
        elif self.local:
            return self.attr_value('LOCAL_CS')
        else:
            return None

    @property
    def srid(self):
<<<<<<< HEAD
        "Return the SRID of top-level authority, or None if undefined."
=======
        "Returns the SRID of top-level authority, or None if undefined."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        try:
            return int(self.attr_value('AUTHORITY', 1))
        except (TypeError, ValueError):
            return None

    # #### Unit Properties ####
    @property
    def linear_name(self):
<<<<<<< HEAD
        "Return the name of the linear units."
=======
        "Returns the name of the linear units."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        units, name = capi.linear_units(self.ptr, byref(c_char_p()))
        return name

    @property
    def linear_units(self):
<<<<<<< HEAD
        "Return the value of the linear units."
=======
        "Returns the value of the linear units."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        units, name = capi.linear_units(self.ptr, byref(c_char_p()))
        return units

    @property
    def angular_name(self):
<<<<<<< HEAD
        "Return the name of the angular units."
=======
        "Returns the name of the angular units."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        units, name = capi.angular_units(self.ptr, byref(c_char_p()))
        return name

    @property
    def angular_units(self):
<<<<<<< HEAD
        "Return the value of the angular units."
=======
        "Returns the value of the angular units."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        units, name = capi.angular_units(self.ptr, byref(c_char_p()))
        return units

    @property
    def units(self):
        """
<<<<<<< HEAD
        Return a 2-tuple of the units value and the units name. Automatically
        determine whether to return the linear or angular units.
=======
        Returns a 2-tuple of the units value and the units name,
        and will automatically determines whether to return the linear
        or angular units.
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        """
        units, name = None, None
        if self.projected or self.local:
            units, name = capi.linear_units(self.ptr, byref(c_char_p()))
        elif self.geographic:
            units, name = capi.angular_units(self.ptr, byref(c_char_p()))
        if name is not None:
            name = force_text(name)
        return (units, name)

    # #### Spheroid/Ellipsoid Properties ####
    @property
    def ellipsoid(self):
        """
<<<<<<< HEAD
        Return a tuple of the ellipsoid parameters:
=======
        Returns a tuple of the ellipsoid parameters:
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
         (semimajor axis, semiminor axis, and inverse flattening)
        """
        return (self.semi_major, self.semi_minor, self.inverse_flattening)

    @property
    def semi_major(self):
<<<<<<< HEAD
        "Return the Semi Major Axis for this Spatial Reference."
=======
        "Returns the Semi Major Axis for this Spatial Reference."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return capi.semi_major(self.ptr, byref(c_int()))

    @property
    def semi_minor(self):
<<<<<<< HEAD
        "Return the Semi Minor Axis for this Spatial Reference."
=======
        "Returns the Semi Minor Axis for this Spatial Reference."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return capi.semi_minor(self.ptr, byref(c_int()))

    @property
    def inverse_flattening(self):
<<<<<<< HEAD
        "Return the Inverse Flattening for this Spatial Reference."
=======
        "Returns the Inverse Flattening for this Spatial Reference."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return capi.invflattening(self.ptr, byref(c_int()))

    # #### Boolean Properties ####
    @property
    def geographic(self):
        """
<<<<<<< HEAD
        Return True if this SpatialReference is geographic
=======
        Returns True if this SpatialReference is geographic
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
         (root node is GEOGCS).
        """
        return bool(capi.isgeographic(self.ptr))

    @property
    def local(self):
<<<<<<< HEAD
        "Return True if this SpatialReference is local (root node is LOCAL_CS)."
=======
        "Returns True if this SpatialReference is local (root node is LOCAL_CS)."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return bool(capi.islocal(self.ptr))

    @property
    def projected(self):
        """
<<<<<<< HEAD
        Return True if this SpatialReference is a projected coordinate system
=======
        Returns True if this SpatialReference is a projected coordinate system
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
         (root node is PROJCS).
        """
        return bool(capi.isprojected(self.ptr))

    # #### Import Routines #####
    def import_epsg(self, epsg):
<<<<<<< HEAD
        "Import the Spatial Reference from the EPSG code (an integer)."
        capi.from_epsg(self.ptr, epsg)

    def import_proj(self, proj):
        "Import the Spatial Reference from a PROJ.4 string."
        capi.from_proj(self.ptr, proj)

    def import_user_input(self, user_input):
        "Import the Spatial Reference from the given user input string."
        capi.from_user_input(self.ptr, force_bytes(user_input))

    def import_wkt(self, wkt):
        "Import the Spatial Reference from OGC WKT (string)"
        capi.from_wkt(self.ptr, byref(c_char_p(force_bytes(wkt))))

    def import_xml(self, xml):
        "Import the Spatial Reference from an XML string."
=======
        "Imports the Spatial Reference from the EPSG code (an integer)."
        capi.from_epsg(self.ptr, epsg)

    def import_proj(self, proj):
        "Imports the Spatial Reference from a PROJ.4 string."
        capi.from_proj(self.ptr, proj)

    def import_user_input(self, user_input):
        "Imports the Spatial Reference from the given user input string."
        capi.from_user_input(self.ptr, force_bytes(user_input))

    def import_wkt(self, wkt):
        "Imports the Spatial Reference from OGC WKT (string)"
        capi.from_wkt(self.ptr, byref(c_char_p(force_bytes(wkt))))

    def import_xml(self, xml):
        "Imports the Spatial Reference from an XML string."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        capi.from_xml(self.ptr, xml)

    # #### Export Properties ####
    @property
    def wkt(self):
<<<<<<< HEAD
        "Return the WKT representation of this Spatial Reference."
=======
        "Returns the WKT representation of this Spatial Reference."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return capi.to_wkt(self.ptr, byref(c_char_p()))

    @property
    def pretty_wkt(self, simplify=0):
<<<<<<< HEAD
        "Return the 'pretty' representation of the WKT."
=======
        "Returns the 'pretty' representation of the WKT."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return capi.to_pretty_wkt(self.ptr, byref(c_char_p()), simplify)

    @property
    def proj(self):
<<<<<<< HEAD
        "Return the PROJ.4 representation for this Spatial Reference."
=======
        "Returns the PROJ.4 representation for this Spatial Reference."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return capi.to_proj(self.ptr, byref(c_char_p()))

    @property
    def proj4(self):
        "Alias for proj()."
        return self.proj

    @property
    def xml(self, dialect=''):
<<<<<<< HEAD
        "Return the XML representation of this Spatial Reference."
=======
        "Returns the XML representation of this Spatial Reference."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        return capi.to_xml(self.ptr, byref(c_char_p()), force_bytes(dialect))


class CoordTransform(GDALBase):
    "The coordinate system transformation object."
    destructor = capi.destroy_ct

    def __init__(self, source, target):
<<<<<<< HEAD
        "Initialize on a source and target SpatialReference objects."
=======
        "Initializes on a source and target SpatialReference objects."
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        if not isinstance(source, SpatialReference) or not isinstance(target, SpatialReference):
            raise TypeError('source and target must be of type SpatialReference')
        self.ptr = capi.new_ct(source._ptr, target._ptr)
        self._srs1_name = source.name
        self._srs2_name = target.name

    def __str__(self):
        return 'Transform from "%s" to "%s"' % (self._srs1_name, self._srs2_name)
