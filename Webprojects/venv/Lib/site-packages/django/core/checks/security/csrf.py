from django.conf import settings

from .. import Tags, Warning, register
<<<<<<< HEAD
=======
from ..utils import patch_middleware_message
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61

W003 = Warning(
    "You don't appear to be using Django's built-in "
    "cross-site request forgery protection via the middleware "
    "('django.middleware.csrf.CsrfViewMiddleware' is not in your "
    "MIDDLEWARE). Enabling the middleware is the safest approach "
    "to ensure you don't leave any holes.",
    id='security.W003',
)

W016 = Warning(
    "You have 'django.middleware.csrf.CsrfViewMiddleware' in your "
    "MIDDLEWARE, but you have not set CSRF_COOKIE_SECURE to True. "
    "Using a secure-only CSRF cookie makes it more difficult for network "
    "traffic sniffers to steal the CSRF token.",
    id='security.W016',
)


def _csrf_middleware():
<<<<<<< HEAD
    return 'django.middleware.csrf.CsrfViewMiddleware' in settings.MIDDLEWARE
=======
    return ("django.middleware.csrf.CsrfViewMiddleware" in settings.MIDDLEWARE_CLASSES or
            settings.MIDDLEWARE and "django.middleware.csrf.CsrfViewMiddleware" in settings.MIDDLEWARE)
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61


@register(Tags.security, deploy=True)
def check_csrf_middleware(app_configs, **kwargs):
    passed_check = _csrf_middleware()
<<<<<<< HEAD
    return [] if passed_check else [W003]
=======
    return [] if passed_check else [patch_middleware_message(W003)]
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61


@register(Tags.security, deploy=True)
def check_csrf_cookie_secure(app_configs, **kwargs):
    passed_check = (
        settings.CSRF_USE_SESSIONS or
        not _csrf_middleware() or
        settings.CSRF_COOKIE_SECURE
    )
<<<<<<< HEAD
    return [] if passed_check else [W016]
=======
    return [] if passed_check else [patch_middleware_message(W016)]
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
