<<<<<<< HEAD
from django.apps.registry import Apps
from django.db import models
from django.db.utils import DatabaseError
=======
from __future__ import unicode_literals

from django.apps.registry import Apps
from django.db import models
from django.db.utils import DatabaseError
from django.utils.encoding import python_2_unicode_compatible
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
from django.utils.timezone import now

from .exceptions import MigrationSchemaMissing


<<<<<<< HEAD
class MigrationRecorder:
    """
    Deal with storing migration records in the database.
=======
class MigrationRecorder(object):
    """
    Deals with storing migration records in the database.
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61

    Because this table is actually itself used for dealing with model
    creation, it's the one thing we can't do normally via migrations.
    We manually handle table creation/schema updating (using schema backend)
    and then have a floating model to do queries with.

    If a migration is unapplied its row is removed from the table. Having
    a row in the table always means a migration is applied.
    """

<<<<<<< HEAD
=======
    @python_2_unicode_compatible
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
    class Migration(models.Model):
        app = models.CharField(max_length=255)
        name = models.CharField(max_length=255)
        applied = models.DateTimeField(default=now)

        class Meta:
            apps = Apps()
            app_label = "migrations"
            db_table = "django_migrations"

        def __str__(self):
            return "Migration %s for %s" % (self.name, self.app)

    def __init__(self, connection):
        self.connection = connection

    @property
    def migration_qs(self):
        return self.Migration.objects.using(self.connection.alias)

<<<<<<< HEAD
    def has_table(self):
        """Return True if the django_migrations table exists."""
        return self.Migration._meta.db_table in self.connection.introspection.table_names(self.connection.cursor())

    def ensure_schema(self):
        """Ensure the table exists and has the correct schema."""
        # If the table's there, that's fine - we've never changed its schema
        # in the codebase.
        if self.has_table():
=======
    def ensure_schema(self):
        """
        Ensures the table exists and has the correct schema.
        """
        # If the table's there, that's fine - we've never changed its schema
        # in the codebase.
        if self.Migration._meta.db_table in self.connection.introspection.table_names(self.connection.cursor()):
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
            return
        # Make the table
        try:
            with self.connection.schema_editor() as editor:
                editor.create_model(self.Migration)
        except DatabaseError as exc:
            raise MigrationSchemaMissing("Unable to create the django_migrations table (%s)" % exc)

    def applied_migrations(self):
<<<<<<< HEAD
        """Return a set of (app, name) of applied migrations."""
        if self.has_table():
            return {tuple(x) for x in self.migration_qs.values_list('app', 'name')}
        else:
            # If the django_migrations table doesn't exist, then no migrations
            # are applied.
            return set()

    def record_applied(self, app, name):
        """Record that a migration was applied."""
=======
        """
        Returns a set of (app, name) of applied migrations.
        """
        self.ensure_schema()
        return set(tuple(x) for x in self.migration_qs.values_list("app", "name"))

    def record_applied(self, app, name):
        """
        Records that a migration was applied.
        """
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        self.ensure_schema()
        self.migration_qs.create(app=app, name=name)

    def record_unapplied(self, app, name):
<<<<<<< HEAD
        """Record that a migration was unapplied."""
=======
        """
        Records that a migration was unapplied.
        """
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        self.ensure_schema()
        self.migration_qs.filter(app=app, name=name).delete()

    def flush(self):
<<<<<<< HEAD
        """Delete all migration records. Useful for testing migrations."""
=======
        """
        Deletes all migration records. Useful if you're testing migrations.
        """
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
        self.migration_qs.all().delete()
