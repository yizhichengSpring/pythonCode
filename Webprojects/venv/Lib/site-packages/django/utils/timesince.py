<<<<<<< HEAD
=======
from __future__ import unicode_literals

>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
import calendar
import datetime

from django.utils.html import avoid_wrapping
from django.utils.timezone import is_aware, utc
<<<<<<< HEAD
from django.utils.translation import gettext, ngettext_lazy

TIMESINCE_CHUNKS = (
    (60 * 60 * 24 * 365, ngettext_lazy('%d year', '%d years')),
    (60 * 60 * 24 * 30, ngettext_lazy('%d month', '%d months')),
    (60 * 60 * 24 * 7, ngettext_lazy('%d week', '%d weeks')),
    (60 * 60 * 24, ngettext_lazy('%d day', '%d days')),
    (60 * 60, ngettext_lazy('%d hour', '%d hours')),
    (60, ngettext_lazy('%d minute', '%d minutes'))
=======
from django.utils.translation import ugettext, ungettext_lazy

TIMESINCE_CHUNKS = (
    (60 * 60 * 24 * 365, ungettext_lazy('%d year', '%d years')),
    (60 * 60 * 24 * 30, ungettext_lazy('%d month', '%d months')),
    (60 * 60 * 24 * 7, ungettext_lazy('%d week', '%d weeks')),
    (60 * 60 * 24, ungettext_lazy('%d day', '%d days')),
    (60 * 60, ungettext_lazy('%d hour', '%d hours')),
    (60, ungettext_lazy('%d minute', '%d minutes'))
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
)


def timesince(d, now=None, reversed=False):
    """
<<<<<<< HEAD
    Take two datetime objects and return the time between d and now as a nicely
    formatted string, e.g. "10 minutes". If d occurs after now, return
    "0 minutes".
=======
    Takes two datetime objects and returns the time between d and now
    as a nicely formatted string, e.g. "10 minutes".  If d occurs after now,
    then "0 minutes" is returned.
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61

    Units used are years, months, weeks, days, hours, and minutes.
    Seconds and microseconds are ignored.  Up to two adjacent units will be
    displayed.  For example, "2 weeks, 3 days" and "1 year, 3 months" are
    possible outputs, but "2 weeks, 3 hours" and "1 year, 5 days" are not.

    Adapted from
    http://web.archive.org/web/20060617175230/http://blog.natbat.co.uk/archive/2003/Jun/14/time_since
    """
    # Convert datetime.date to datetime.datetime for comparison.
    if not isinstance(d, datetime.datetime):
        d = datetime.datetime(d.year, d.month, d.day)
    if now and not isinstance(now, datetime.datetime):
        now = datetime.datetime(now.year, now.month, now.day)

    if not now:
        now = datetime.datetime.now(utc if is_aware(d) else None)

    if reversed:
        d, now = now, d
    delta = now - d

    # Deal with leapyears by subtracing the number of leapdays
    leapdays = calendar.leapdays(d.year, now.year)
    if leapdays != 0:
        if calendar.isleap(d.year):
            leapdays -= 1
        elif calendar.isleap(now.year):
            leapdays += 1
    delta -= datetime.timedelta(leapdays)

    # ignore microseconds
    since = delta.days * 24 * 60 * 60 + delta.seconds
    if since <= 0:
        # d is in the future compared to now, stop processing.
<<<<<<< HEAD
        return avoid_wrapping(gettext('0 minutes'))
=======
        return avoid_wrapping(ugettext('0 minutes'))
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
    for i, (seconds, name) in enumerate(TIMESINCE_CHUNKS):
        count = since // seconds
        if count != 0:
            break
    result = avoid_wrapping(name % count)
    if i + 1 < len(TIMESINCE_CHUNKS):
        # Now get the second item
        seconds2, name2 = TIMESINCE_CHUNKS[i + 1]
        count2 = (since - (seconds * count)) // seconds2
        if count2 != 0:
<<<<<<< HEAD
            result += gettext(', ') + avoid_wrapping(name2 % count2)
=======
            result += ugettext(', ') + avoid_wrapping(name2 % count2)
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
    return result


def timeuntil(d, now=None):
    """
<<<<<<< HEAD
    Like timesince, but return a string measuring the time until the given time.
=======
    Like timesince, but returns a string measuring the time until
    the given time.
>>>>>>> b6c47195d68bf438d50153265b824fab6e10db61
    """
    return timesince(d, now, reversed=True)
